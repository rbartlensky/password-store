use std::fs::{create_dir_all, read_to_string, File};
use std::io::Write;

use pwvlt::Config;

use crate::error::Error;

const DEFAULT_CONFIG: &str = "# Autogenerated pwvlt config
[general]
backends = [\"nitrokey\", \"keyring\"]

[password]
length = 20
numbers = true
lowercase_letters = true
uppercase_letters = true
symbols = true
strict = true
";

pub fn load_config() -> Result<Config, Error> {
    let home = home::home_dir().ok_or(Error::HomeNotFound)?;
    // config will be loaded from ~/.config/pwvlt/config.toml
    let config_dir = home.join(".config").join("pwvlt");
    if !config_dir.exists() {
        log::info!("Creating {}", config_dir.display());
        create_dir_all(&config_dir)?;
    }
    let config_file = config_dir.join("config.toml");
    if !config_file.exists() {
        log::info!("Writing default config to: {}", config_file.display());
        let mut config = File::create(&config_file)?;
        write!(config, "{}", DEFAULT_CONFIG)?;
    }
    log::info!("Loading toml config into memory");
    let toml_config = read_to_string(config_file)?;
    toml::from_str(&toml_config).map_err(Error::from)
}

pub fn write_config(config: &Config) -> Result<(), Error> {
    let home = home::home_dir().ok_or(Error::HomeNotFound)?;
    log::info!("Writing pwvlt config.");
    write!(
        File::create(home.join(".config").join("pwvlt").join("config.toml"))?,
        "{}",
        toml::to_string(config)?
    )
    .map_err(Error::from)
}
